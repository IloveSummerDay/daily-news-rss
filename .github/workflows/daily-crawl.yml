name: Daily News Crawl

on:
  # schedule:
  #   - cron: '0 0,4,8,12,16,20 * * *'  # Runs 6 times daily every 4 hours (00:00, 04:00, 08:00, 12:00, 16:00, 20:00 UTC)
  workflow_dispatch: # Manual trigger for testing
  # push:
  #     branches: [main] # Also run on pushes to main for testing

jobs:
  crawl-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Allow time(minutes) for model downloads

    permissions:
      contents: write # Allow pushing changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch full history to avoid detached HEAD

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          echo "Dependencies installed"

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium

      - name: Create directories
        run: |
          mkdir -p data
          mkdir -p .cache
          mkdir -p pdfs

      - name: Crawl RSS feeds
        run: |
          echo "🤖 Starting RSS crawl..."
          node scripts/crawl.js
          echo "Crawl completed"

      - name: Optimize and validate
        run: |
          # Validate JSON files
          echo "🔍 Validating data files..."
          node -e "
            const fs = require('fs');
            try {
              JSON.parse(fs.readFileSync('data/latest-raw.json'));
              console.log('✅ Data files valid');
            } catch(e) {
              console.error('❌ Invalid JSON:', e.message);
              process.exit(1);
            }
          "

          # Check if we have articles
          ARTICLE_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('data/latest-raw.json')).articles.length)")
          echo "📊 Found $ARTICLE_COUNT articles"

          if [ "$ARTICLE_COUNT" -lt 10 ]; then
            echo "⚠️ Warning: Low article count ($ARTICLE_COUNT)"
          fi

      - name: Generate article PDFs
        run: |
          echo "📄 Starting PDF generation..."
          # Count PDFs before generation
          PDF_COUNT_BEFORE=$(find pdfs/ -name "*.pdf" -type f 2>/dev/null | wc -l || echo "0")
          echo "📊 PDFs before generation: $PDF_COUNT_BEFORE"

          # Generate PDFs
          npm run url-to-pdf

          # Count PDFs after generation
          PDF_COUNT_AFTER=$(find pdfs/ -name "*.pdf" -type f 2>/dev/null | wc -l || echo "0")
          NEW_PDFS=$((PDF_COUNT_AFTER - PDF_COUNT_BEFORE))
          echo "📊 PDFs after generation: $PDF_COUNT_AFTER"
          echo "📊 New PDFs generated: $NEW_PDFS"

          # Save the count for later use
          echo "NEW_PDFS=$NEW_PDFS" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.email "zl-bot@users.noreply.github.com"
          git config --global user.name "ZL Bot"
          git config --global pull.rebase false
          git config --global merge.tool false

      - name: Get current branch
        run: |
          # Get the current branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          if [ "$BRANCH_NAME" = "HEAD" ]; then
            echo "❌ Detached HEAD detected"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          # Ensure we're on the correct branch
          git checkout $BRANCH_NAME

          # Pull latest changes with conflict resolution
          echo "Pulling latest changes..."
          git pull origin $BRANCH_NAME --no-rebase || {
            echo "Pull failed, checking status..."
            git status
            echo "Attempting to resolve conflicts..."
            
            # Try pull again
            git pull origin $BRANCH_NAME --no-rebase || {
              echo "Pull still failed, continuing with current state..."
            }
          }

          # Add all changes
          git add data/
          git add -f pdfs/  # Force add pdfs folder (ignored locally but needed in CI)
          git add -u  # Stage deletions

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit - this is normal if no new articles were found"
            exit 0  # Exit successfully, not as failure
          fi

          # Create commit message with stats
          ARTICLE_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('data/latest-raw.json')).articles.length)")
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          # Check what's being committed
          echo "Changes to be committed:"
          git status --short

          git commit -m "📰 Crawl sources & generate PDFs - $ARTICLE_COUNT articles, $NEW_PDFS new PDFs - $TIMESTAMP"

          # Push changes with retry logic
          echo "Pushing changes..."
          git push origin $BRANCH_NAME || {
            echo "Push failed, trying with force-with-lease..."
            git push origin $BRANCH_NAME --force-with-lease || {
              echo "❌ Push failed even with force-with-lease"
              echo "This might indicate a serious issue with the repository state"
              exit 1
            }
          }

      - name: Report status
        run: |
          echo "✅ Source crawling & PDF generation completed successfully!"
          echo "📊 Final Statistics:"

          # Count articles by source group
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Count articles in combined file
            const combinedData = JSON.parse(fs.readFileSync('data/latest-raw.json'));
            console.log(\`📰 Total articles crawled: \${combinedData.articles.length}\`);
            
            // Count articles by source group
            const dataDir = 'data';
            const groups = fs.readdirSync(dataDir).filter(item => {
              return fs.statSync(path.join(dataDir, item)).isDirectory();
            });
            
            console.log('📁 Articles by source group:');
            groups.forEach(group => {
              const groupFiles = fs.readdirSync(path.join(dataDir, group))
                .filter(file => file.endsWith('-latest-raw.json'));
              if (groupFiles.length > 0) {
                const latestFile = groupFiles.sort().pop();
                const groupData = JSON.parse(fs.readFileSync(path.join(dataDir, group, latestFile)));
                console.log(\`   \${group}: \${groupData.articles.length} articles\`);
              }
            });
          "

          # Report new PDFs generated in this run
          echo "📄 New PDFs generated in this run: $NEW_PDFS"

          # Show total PDFs by source (for reference)
          echo "📊 Total PDFs by source (including previous runs):"
          find pdfs/ -name "*.pdf" -type f 2>/dev/null | while read pdf; do
            source_dir=$(dirname "$pdf" | sed 's|pdfs/||' | cut -d'/' -f1)
            echo "   $source_dir: $(basename "$pdf")"
          done | sort | uniq -c | while read count source; do
            echo "   $source: $count PDFs"
          done

# Environment variables for the workflow
env:
  ENV_TEST: "test" # a sample variable for testing
